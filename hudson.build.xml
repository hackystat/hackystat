<project name="integration.hudson" default="daily.build.instrumented">
  <description>
  A set of tasks for doing integration/daily builds of Hackystat.
  </description>

  <!-- Overwrite the system build directory for hudson-related stuff. -->
  <property name="system.integration.root" location="${basedir}/hudson" />
  <property name="system.build.dir" location="${system.integration.root}/hackystat-integration" />
  <mkdir dir="${system.build.dir}" />

  <import file="build.xml" />
  <import file="macros.build.xml" />
  <import file="dist.build.xml" />
  <import file="hackystat.build.xml" />


  <target name="daily.build.instrumented" 
          depends="daily.build.checkout, 
                   daily.build.qa,
                   integration.checkstyle.sensor" 
    description="Checks out, builds, and sends hackystat data on all modules. ">
  </target>

  <target name="daily.build.qa" description="Runs the QA targets over all systems, generates data for sensors, builds their jars.">
    <ant dir="${system.build.dir}/${utilities.system.name}" antfile="hudson.build.xml" target="hudson.qa" />
    <ant dir="${system.build.dir}/${sensorbase.system.name}" antfile="hudson.build.xml" target="hudson.qa" />
  </target>

  <target name="daily.build.checkout" description="Anonymous check out/update of all projects from Google Project Hosting.">
    <module.checkout.anonymous module.name="${utilities.system.name}" />
    <module.checkout.anonymous module.name="${sensorbase.system.name}" />
    <!--
    <module.checkout.anonymous module.name="${sensorshell.system.name}" />
    <module.checkout.anonymous module.name="${dpd.system.name}" />
    <module.checkout.anonymous module.name="${telemetry.system.name}" />
    <module.checkout.anonymous module.name="${ant.system.name}" />
    <module.checkout.anonymous module.name="${xmldata.system.name}" />
    <module.checkout.anonymous module.name="${emacs.system.name}" />
    <module.checkout.anonymous module.name="${vim.system.name}" />
    <module.checkout.anonymous module.name="${stackyhack.system.name}" />
    <module.checkout.anonymous module.name="${sdv.system.name}" />
    <module.checkout.anonymous module.name="${sdb.system.name}" />
    <module.checkout.anonymous module.name="${tv.system.name}" />
    <module.checkout.anonymous module.name="${pv.system.name}" />
    <module.checkout.anonymous module.name="${eclipse.system.name}" />
    <module.checkout.anonymous module.name="${systemstatus.system.name}" />
    -->
  </target>

  <target name="integration.clean" description="Delete system directories.">
    <ant dir="${system.build.dir}/${utilities.system.name}" antfile="build.xml" target="clean" />
    <ant dir="${system.build.dir}/${sensorbase.system.name}" antfile="build.xml" target="clean" />
  </target>

  <target name="integration.checkstyle.sensor" description="Send hackystat data about this Checkstyle invocation.">
    <fileset id="checkstyle.output.fileset" dir="${system.build.dir}" includes="**/checkstyle/checkstyle.xml" />
    <hackystat.checkstyle checkstyle.output.fileset="checkstyle.output.fileset" verbose="${hackystat.verbose.mode}" />
  </target>

  <target name="integration.junit.sensor" description="Send hackystat data about this JUnit invocation.">
    <fileset id="junit.output.fileset" dir="${system.build.dir}" includes="**/junit/TEST-*.xml" />
    <fileset id="junit.src.fileset" dir="${system.build.dir}" includes="**/src/**/*.java" excludes="**/jaxb/**" />
    <hackystat.junit junit.src.fileset="junit.src.fileset" junit.output.fileset="junit.output.fileset" verbose="${hackystat.verbose.mode}" />
  </target>

  <target name="integration.findbugs.sensor" description="Send hackystat data about this FindBugs invocation.">
    <fileset id="findbugs.output.fileset" dir="${system.build.dir}" includes="**/findbugs/findbugs.xml" />
    <hackystat.findbugs findbugs.output.fileset="findbugs.output.fileset" verbose="${hackystat.verbose.mode}" />
  </target>

  <target name="integration.pmd.sensor" description="Send hackystat data about this PMD invocation.">
    <fileset id="pmd.output.fileset" dir="${system.build.dir}" includes="**/pmd/pmd.xml" />
    <fileset id="pmd.src.fileset" dir="${system.build.dir}" includes="**/src/**/*.java" excludes="**/jaxb/**" />
    <hackystat.pmd pmd.output.fileset="pmd.output.fileset" pmd.src.fileset="pmd.src.fileset" verbose="${hackystat.verbose.mode}" />
  </target>

  <property name="system.sclc.dir" location="${system.build.dir}/hudson/sclc" />
  
  <target name="integration.sclc.tool" description="Compute size data on the source code using SCLC.">
    <!-- Check for the SCLC_HOME environment variable, failing the build if it can't be found. -->
    <available file="${env.SCLC_HOME}/src/sclc" property="sclc.available" />
    <fail unless="sclc.available" message="Error: SCLC_HOME not set or file 'sclc' not found, indicating SCLC is not installed." />
    <mkdir dir="${system.sclc.dir}" />
    <!-- Collect size data on src/ dir using SCLC.  Invoke Perl via the exec task to run SCLC. -->
    <exec executable="perl" dir="${basedir}">
      <arg line="${env.SCLC_HOME}/src/sclc -excludedir '\S*[\\\|/]build[\\\|/]\S*' -default_exclude -ignore -xml_output ${system.sclc.dir}/size.xml -recurse ${system.integration.root}" />
    </exec>
  </target>

  <target name="integration.sclc.sensor" description="Send hackystat data about this SCLC invocation.">
    <xslt in="${system.sclc.dir}/size.xml" out="${system.sclc.dir}/transform-size.xml" style="${system.build.dir}/hackystat-sensorbase-uh/lib/sclc/sclc.xsl" />
    <hackystat.sclc sclc.file="${system.sclc.dir}/transform-size.xml" />
  </target>

</project>





