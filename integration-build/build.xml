<project name="integration.build" default="build.all" xmlns:ivy="antlib:org.apache.ivy.ant">
  <description>
    The master build file for creating system-level releases of Hackystat.
  </description>

  <!-- Get today's version number. -->
  <property name="majorVersionNumber" value="8" />
  <property name="minorVersionNumber" value="3" />
  <tstamp>
    <format property="DAYSTAMP" pattern="Mdd" />
    <format property="RELEASEDATE" pattern="MMMM dd yyyy" />
    <format property="ECLIPSEDATE" pattern="yyyyMMdd" />
  </tstamp>

  <property name="version" value="${majorVersionNumber}.${minorVersionNumber}.${DAYSTAMP}" />
  <property name="eclipse.version" value="${majorVersionNumber}.${minorVersionNumber}.v${ECLIPSEDATE}" />

  <!-- Define build system subdirectories -->
  <property name="system.build.dir" location="${basedir}" />
  <property name="system.services.dir" location="${system.build.dir}/system/services/" />
  <property name="system.sensors.dir" location="${system.build.dir}/system/sensors/" />


  <!-- Define all project names here. Current total: 18 (including unbrella Hackystat itself.)-->
  <property name="ant.system.name" value="hackystat-sensor-ant" />
  <property name="dpd.system.name" value="hackystat-analysis-dailyprojectdata" />
  <property name="eclipse.system.name" value="hackystat-sensor-eclipse" />
  <property name="hackystat.system.name" value="hackystat" />
  <property name="emacs.system.name" value="hackystat-sensor-emacs" />
  <property name="pv.system.name" value="hackystat-ui-projectviewer2" />
  <property name="pb.system.name" value="hackystat-ui-wicket" />
  <property name="sdb.system.name" value="hackystat-ui-sensordatabrowser" />
  <property name="sdv.system.name" value="hackystat-ui-sensordataviewer" />
  <property name="sensorbase.system.name" value="hackystat-sensorbase-uh" />
  <property name="postgres.system.name" value="hackystat-sensorbase-postgres" />
  <property name="sensorshell.system.name" value="hackystat-sensor-shell" />
  <property name="simdata.system.name" value="hackystat-sensorbase-simdata" />
  <property name="stackyhack.system.name" value="hackystat-sensor-example" />
  <property name="systemstatus.system.name" value="hackystat-ui-systemstatus" />
  <property name="telemetry.system.name" value="hackystat-analysis-telemetry" />
  <property name="tickertape.system.name" value="hackystat-ui-tickertape" />
  <property name="tv.system.name" value="hackystat-ui-telemetryviewer" />
  <property name="utilities.system.name" value="hackystat-utilities" />
  <property name="vim.system.name" value="hackystat-sensor-vim" />
  <property name="xmldata.system.name" value="hackystat-sensor-xmldata" />



  <!-- Now we override the following environment variables to point into this build for use doing global builds. -->
  <property name="env.HACKYSTAT_SENSORBASE_HOME" location="${system.build.dir}/${sensorbase.system.name}" />
  <property name="env.HACKYSTAT_UTILITIES_HOME" location="${system.build.dir}/${utilities.system.name}" />
  <property name="env.HACKYSTAT_SENSORSHELL_HOME" location="${system.build.dir}/${sensorshell.system.name}" />
  <property name="env.HACKYSTAT_DAILYPROJECTDATA_HOME" location="${system.build.dir}/${dpd.system.name}" />
  <property name="env.HACKYSTAT_TELEMETRY_HOME" location="${system.build.dir}/${telemetry.system.name}" />
  <!-- Disable Emma during integration build due to ExceptionInInitializer error on Windows platform. -->
  <property name="hackystat.enable" value="false"/>

  <!-- Now get the other environment variables (for JUnit, Checkstyle, etc.) -->
  <property environment="env" />

  <!-- read in svn.username and svn.password (not necessary for anonymous checkout). -->
  <property file="svn.properties" />

  <import file="macros.build.xml" />

  <target name="build.all" depends="
				    check-install,
				    clean,
				    build.utilities,
				    build.sensorbase,
				    build.sensorshell,
				    build.eclipse,
				    build.postgres,
				    build.dailyprojectdata,
				    build.telemetry,
				    build.projectbrowser,
				    build.tickertape,
  				    build.ant,
  				    build.xmldata,
  				    build.emacs,
				    build.vim,
				    build.stackyhack,
				    build.systemstatus,
				    build.simdata"
	  description="Cleans, then checks out and builds all modules.  Requires SVN commit access." />

  <target name="checkout.anonymous" depends="check-install" description="Anonymous check out/update of all projects from Google Project Hosting.">
    <module.checkout.anonymous module.name="${ant.system.name}" />
    <module.checkout.anonymous module.name="${dpd.system.name}" />
    <module.checkout.anonymous module.name="${eclipse.system.name}" />
    <module.checkout.anonymous module.name="${emacs.system.name}" />
    <module.checkout.anonymous module.name="${pb.system.name}" />
    <module.checkout.anonymous module.name="${postgres.system.name}" />
    <module.checkout.anonymous module.name="${sensorbase.system.name}" />
    <module.checkout.anonymous module.name="${sensorshell.system.name}" />
    <module.checkout.anonymous module.name="${simdata.system.name}" />
    <module.checkout.anonymous module.name="${stackyhack.system.name}" />
    <module.checkout.anonymous module.name="${systemstatus.system.name}" />
    <module.checkout.anonymous module.name="${telemetry.system.name}" />
    <module.checkout.anonymous module.name="${tickertape.system.name}" />
    <module.checkout.anonymous module.name="${utilities.system.name}" />
    <module.checkout.anonymous module.name="${vim.system.name}" />
    <module.checkout.anonymous module.name="${xmldata.system.name}" />
  </target>

  <target name="commit" depends="check-install" description="Commit all changes from all projects from Google Project Hosting. Requires project membership.">
    <fail message="Must supply -Dsvn.message={message}" unless="svn.message" />
    <svn.commit svn.module="${ant.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${dpd.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${eclipse.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${emacs.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${pb.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${postgres.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${sensorbase.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${sensorshell.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${simdata.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${stackyhack.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${systemstatus.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${telemetry.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${tickertape.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${utilities.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${vim.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${xmldata.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
  </target>


  <target name="checkout" depends="check-install" description="Check out/update of all projects from Google Project Hosting. Requires project membership.">
    <fail message="Must define svn.properties file with username and password." unless="svn.username" />
    <module.checkout module.name="${ant.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${dpd.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${eclipse.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${emacs.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${pb.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${postgres.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${sensorbase.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${sensorshell.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${simdata.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${stackyhack.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${systemstatus.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${telemetry.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${tickertape.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${utilities.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${vim.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${xmldata.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
  </target>

  <target name="build.sensorbase">
    <buildModule module.name="${sensorbase.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copyServiceDist module.name="${sensorbase.system.name}" />
    <copyServiceBuildJar module.name="${sensorbase.system.name}" />
    <copyServiceBinDir module.name="${sensorbase.system.name}" dir.name="xml" />
    <copyServiceBin module.name="${sensorbase.system.name}" bin.name="sample.sensorbase.properties" />
    <copyServiceBin module.name="${sensorbase.system.name}" bin.name="startup.sensorbase.bat" />
    <copyServiceBin module.name="${sensorbase.system.name}" bin.name="startup.sensorbase.command" />
  </target>

  <target name="build.postgres">
    <buildModuleNoJUnit module.name="${postgres.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copyServiceDist module.name="${postgres.system.name}" />
    <copyServiceBuildJar module.name="${postgres.system.name}" />
    <copyServiceBin module.name="${postgres.system.name}" bin.name="sample.sensorbase.properties" />
    <copyServiceBin module.name="${postgres.system.name}" bin.name="postgres_hackystat_schema.sql" />
  </target>

  <target name="build.utilities">
    <buildModule module.name="${utilities.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copyServiceDist module.name="${utilities.system.name}" />
    <copyServiceBuildJar module.name="${utilities.system.name}" />
  </target>

  <target name="build.sensorshell">
    <buildModule module.name="${sensorshell.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copySensorDist module.name="${sensorshell.system.name}" />
    <copySensorBuildJar module.name="${sensorshell.system.name}" />
    <copySensorBin module.name="${sensorshell.system.name}" bin.name="sample.sensorshell.properties" />
  </target>

  <target name="build.ant">
    <buildModule module.name="${ant.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copySensorDist module.name="${ant.system.name}" />
    <copySensorBuildJar module.name="${ant.system.name}" />
  </target>

  <target name="build.xmldata">
    <buildModule module.name="${xmldata.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copySensorDist module.name="${xmldata.system.name}" />
    <copySensorBuildJar module.name="${xmldata.system.name}" />
    <copySensorBinDir module.name="${xmldata.system.name}" dir.name="xml" />
  </target>

  <target name="build.emacs">
    <buildModule module.name="${emacs.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copySensorDist module.name="${emacs.system.name}" />
    <copySensorBin module.name="${emacs.system.name}" bin.name="build/sensor-package.el" />
  </target>

  <target name="build.vim">
    <buildModule module.name="${vim.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copySensorDist module.name="${vim.system.name}" />
    <copySensorBin module.name="${vim.system.name}" bin.name="HSVimSensor.class" />
    <copySensorBin module.name="${vim.system.name}" bin.name="VIMsensor.vim" />
  </target>

  <target name="build.eclipse">
    <buildModule module.name="${eclipse.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copySensorDist module.name="${eclipse.system.name}" />
    <copySensorBin module.name="${eclipse.system.name}" bin.name="org.hackystat.sensor.eclipse_${eclipse.version}.jar" />
  </target>


  <target name="build.projectbrowser">
    <buildModuleNoJUnit module.name="${pb.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copyServiceDist module.name="${pb.system.name}" />
    <copyServiceBuildJar module.name="${pb.system.name}" />
    <copyServiceBin module.name="${pb.system.name}" bin.name="sample.projectbrowser.properties" />
    <copyServiceBin module.name="${pb.system.name}" bin.name="startup.projectbrowser.bat" />
    <copyServiceBin module.name="${pb.system.name}" bin.name="startup.projectbrowser.command" />
  </target>

  <target name="build.dailyprojectdata">
    <buildModule module.name="${dpd.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copyServiceDist module.name="${dpd.system.name}" />
    <copyServiceBuildJar module.name="${dpd.system.name}" />
    <copyServiceBin module.name="${dpd.system.name}" bin.name="sample.dailyprojectdata.properties" />
    <copyServiceBin module.name="${dpd.system.name}" bin.name="startup.dpd.bat" />
    <copyServiceBin module.name="${dpd.system.name}" bin.name="startup.dpd.command" />
  </target>

  <target name="build.telemetry">
    <buildModule module.name="${telemetry.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copyServiceDist module.name="${telemetry.system.name}" />
    <copyServiceBuildJar module.name="${telemetry.system.name}" />
    <copyServiceBin module.name="${telemetry.system.name}" bin.name="sample.telemetry.properties" />
    <copyServiceBinDir module.name="${telemetry.system.name}" dir.name="definitions" />
    <copyServiceBinDir module.name="${telemetry.system.name}" dir.name="prefetch" />
    <copyServiceBin module.name="${telemetry.system.name}" bin.name="startup.telemetry.bat" />
    <copyServiceBin module.name="${telemetry.system.name}" bin.name="startup.telemetry.command" />
  </target>

  <target name="build.stackyhack">
    <buildModule module.name="${stackyhack.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copySensorDist module.name="${stackyhack.system.name}" />
    <copySensorBin module.name="${stackyhack.system.name}" bin.name="build/dist/${stackyhack.system.name}-${version}.zip" />
  </target>

  <target name="build.systemstatus">
    <buildModule module.name="${systemstatus.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copyServiceDist module.name="${systemstatus.system.name}" />
    <copyServiceBuildJar module.name="${systemstatus.system.name}" />
  </target>

  <target name="build.simdata">
    <buildModule module.name="${simdata.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copyServiceDist module.name="${simdata.system.name}" />
    <copyServiceBuildJar module.name="${simdata.system.name}" />
    <copyServiceBinDir module.name="${simdata.system.name}" dir.name="definitions" />
  </target>

  <target name="build.tickertape">
    <buildModule module.name="${tickertape.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copyServiceDist module.name="${tickertape.system.name}" />
    <copyServiceBuildJar module.name="${tickertape.system.name}" />
    <copyServiceBin module.name="${tickertape.system.name}" bin.name="startup.tickertape.bat" />
    <copyServiceBin module.name="${tickertape.system.name}" bin.name="startup.tickertape.command" />
    <copyServiceBin module.name="${tickertape.system.name}" bin.name="sample.tickertape.xml" />
  </target>

  <target name="clean" description="Delete system directories.">
    <delete dir="${system.services.dir}" quiet="true" />
    <delete dir="${system.sensors.dir}" quiet="true" />
  </target>

  <!--
      Ivy download targets and locations.
  -->
  <property name="lib.dir" location="${basedir}/lib" />
  <property name="ivy.jar.path" location="${user.home}/.ivy2/ivyjar/" />
  <property name="library.versions.path" location="${user.home}/.hackystat/library.versions.properties" />
  <available file="${ivy.jar.path}/ivy.jar" property="ivy.jar.available" />
  <available file="${library.versions.path}" property="library.versions.available" />
  <available file="${basedir}/ivysettings.xml" property="ivysettings.available" />
  <available file="${lib.dir}/svnkit/svnkit.jar" property="svnkit.available" />

  <target name="install" description="Downloads library version numbers, then downloads Ivy and ivysettings.xml">
    <antcall target="install.library.versions.properties" />
    <property file="${library.versions.path}" />
    <antcall target="install.ivy" />
    <antcall target="install.ivysettings.xml" />
    <antcall target="install.svnkit" />
  </target>

  <target name="install.ivy" description="Downloads Ivy into lib directory.">
    <mkdir dir="${ivy.jar.path}" />
    <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar" dest="${ivy.jar.path}/ivy.jar" usetimestamp="true" />
  </target>

  <target name="install.library.versions.properties" description="Downloads library.versions.properties into .hackystat directory.">
    <mkdir dir="${user.home}/.hackystat" />
    <get src="https://raw.github.com/hackystat/hackystat/master/configfiles/library.versions.properties" dest="${library.versions.path}" usetimestamp="true" />
  </target>

  <target name="install.ivysettings.xml" description="Downloads ivysettings.xml into .hackystat/ivy directory.">
    <get src="https://raw.github.com/hackystat/hackystat/master/configfiles/ivysettings.xml" dest="${basedir}/ivysettings.xml" usetimestamp="true" />
  </target>

  <target name="install.svnkit" description="Downloads SVNKit into lib dir.">
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpath="${ivy.jar.path}/ivy.jar"/>
    <ivy:retrieve organisation="com.svnkit" module="svnkit" revision="${svnkit.version}" pattern="${lib.dir}/svnkit/[artifact].[ext]" sync="true" inline="true" conf="default,cli" log="download-only" transitive="false" type="jar" />
  </target>

  <path id="svnkit.path">
    <fileset dir="${lib.dir}/svnkit">
      <include name="*.jar" />
    </fileset>
  </path>

  <target name="check-install" description="Fails build if Ivy installation is not OK.">
    <fail message="Error: ivysettings.xml not found. Please invoke 'ant install'." unless="ivysettings.available" />
    <fail message="Error: ivy.jar not found. Please invoke 'ant install'." unless="ivy.jar.available" />
    <fail message="Error: library.versions.properties not found. Please invoke 'ant install'." unless="library.versions.available" />
    <fail message="Error: svnkit not found. Please invoke 'ant install'." unless="svnkit.available" />
  </target>

</project>





