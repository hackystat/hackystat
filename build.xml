<project name="integration.build" default="build.all">
  <description>
  The master build file for creating system-level releases of Hackystat.
  </description>

  <!--
   Note: if you get the following certificate issue, just type 'p' at the command line:
    svnCheckout:
         [java] Error validating server certificate for 'https://hackystat-sensorbase-uh.googlecode.com:443':
         [java]  - The certificate is not issued by a trusted authority. Use the
         [java]    fingerprint to validate the certificate manually!
         [java]  - The certificate hostname does not match.
         [java] Certificate information:
         [java]  - Subject: CN=*.googlecode.com, O=Google Inc, L=Mountain View, ST=California, C=US
         [java]  - Valid: from Fri Jun 23 06:05:41 HST 2006 until Sat Jun 21 01:45:36 HST 2008
         [java]  - Issuer: EMAILADDRESS=premium-server@thawte.com, CN=Thawte Premium Server CA, OU=Certification Services Division, O=Thawte Consulting cc, L=Cape Town, ST=Western Cape, C=ZA
         [java]  - Fingerprint: 89:87:5e:ca:0b:03:d2:83:db:7b:3f:20:5d:d0:76:c7:76:6b:cb:b2
    p
         [java] svn: '/Users/johnson/svn-google/hackystat/build/sensorbase' is already a working copy for a different URL
         [java] (R)eject, accept (t)emporarily or accept (p)ermanently? 
         [java] Java Result: 1
  -->

  <!-- Get today's version number. -->
  <property name="majorVersionNumber" value="8" />
  <property name="minorVersionNumber" value="1" />
  <tstamp>
    <format property="DAYSTAMP" pattern="Mdd" />
    <format property="RELEASEDATE" pattern="MMMM dd yyyy" />
    <format property="ECLIPSEDATE" pattern="yyyyMMdd" />
  </tstamp>

  <property name="version" value="${majorVersionNumber}.${minorVersionNumber}.${DAYSTAMP}" />
  <property name="eclipse.version" value="${majorVersionNumber}.${minorVersionNumber}.v${ECLIPSEDATE}" />

  <!-- Define build system subdirectories -->
  <property name="system.build.dir" location="${basedir}" />
  <property name="system.services.dir" location="${system.build.dir}/system/services/" />
  <property name="system.sensors.dir" location="${system.build.dir}/system/sensors/" />


  <!-- Define all project names here. -->
  <property name="ant.system.name" value="hackystat-sensor-ant" />
  <property name="dpd.system.name" value="hackystat-analysis-dailyprojectdata" />
  <property name="eclipse.system.name" value="hackystat-sensor-eclipse" />
  <property name="hackystat.system.name" value="hackystat" />
  <property name="emacs.system.name" value="hackystat-sensor-emacs" />
  <property name="pv.system.name" value="hackystat-ui-projectviewer2" />
  <property name="sdb.system.name" value="hackystat-ui-sensordatabrowser" />
  <property name="sdv.system.name" value="hackystat-ui-sensordataviewer" />
  <property name="sensorbase.system.name" value="hackystat-sensorbase-uh" />
  <property name="sensorshell.system.name" value="hackystat-sensor-shell" />
  <property name="simdata.system.name" value="hackystat-sensorbase-simdata" />
  <property name="stackyhack.system.name" value="hackystat-sensor-example" />
  <property name="systemstatus.system.name" value="hackystat-ui-systemstatus" />
  <property name="telemetry.system.name" value="hackystat-analysis-telemetry" />
  <property name="tv.system.name" value="hackystat-ui-telemetryviewer" />
  <property name="utilities.system.name" value="hackystat-utilities" />
  <property name="vim.system.name" value="hackystat-sensor-vim" />
  <property name="xmldata.system.name" value="hackystat-sensor-xmldata" />



  <!-- Now we override the following environment variables to point into this build for use doing global builds. -->
  <property name="env.HACKYSTAT_SENSORBASE_HOME" location="${system.build.dir}/${sensorbase.system.name}" />
  <property name="env.HACKYSTAT_UTILITIES_HOME" location="${system.build.dir}/${utilities.system.name}" />
  <property name="env.HACKYSTAT_SENSORSHELL_HOME" location="${system.build.dir}/${sensorshell.system.name}" />
  <property name="env.HACKYSTAT_DAILYPROJECTDATA_HOME" location="${system.build.dir}/${dpd.system.name}" />
  <property name="env.HACKYSTAT_TELEMETRY_HOME" location="${system.build.dir}/${telemetry.system.name}" />
  <!-- Disable Emma during integration build due to ExceptionInInitializer error on Windows platform. -->
  <property name="emma.disabled" value="true" />
  <property name="hackystat.enable" value="false"/>

  <!-- Now get the other environment variables (for JUnit, Checkstyle, etc.) -->
  <property environment="env" />

  <!-- Make sure that SvnKit is installed . -->
  <available file="${env.SVNKIT_HOME}/svnkit.jar" type="file" property="svnkit.available" />
  <fail message="This package requires SVNKit to be downloaded and SVNKIT_HOME defined" unless="svnkit.available" />

  <!-- read in svn.username and svn.password (not necessary for anonymous checkout). -->
  <property file="svn.properties" />

  <import file="macros.build.xml" />

  <target name="build.all" depends="clean,
             build.utilities,    
             build.sensorbase,
             build.sensorshell,
             build.dailyprojectdata,
             build.telemetry,
  	     build.ant, 
  	     build.xmldata, 
  	     build.emacs, 
             build.vim,
             build.stackyhack,
  	     build.sensordataviewer, 
  	     build.sensordatabrowser,
             build.telemetryviewer,
             build.projectviewer,
	     build.eclipse,
             build.systemstatus,
             build.simdata" description="Cleans, then checks out and builds all modules.  Requires SVN commit access." />

  <target name="checkout.anonymous" description="Anonymous check out/update of all projects from Google Project Hosting.">
    <module.checkout.anonymous module.name="${ant.system.name}" />
    <module.checkout.anonymous module.name="${dpd.system.name}" />
    <module.checkout.anonymous module.name="${eclipse.system.name}" />
    <module.checkout.anonymous module.name="${emacs.system.name}" />
    <module.checkout.anonymous module.name="${pv.system.name}" />
    <module.checkout.anonymous module.name="${sdb.system.name}" />
    <module.checkout.anonymous module.name="${sdv.system.name}" />
    <module.checkout.anonymous module.name="${sensorbase.system.name}" />
    <module.checkout.anonymous module.name="${sensorshell.system.name}" />
    <module.checkout.anonymous module.name="${simdata.system.name}" />
    <module.checkout.anonymous module.name="${stackyhack.system.name}" />
    <module.checkout.anonymous module.name="${systemstatus.system.name}" />
    <module.checkout.anonymous module.name="${telemetry.system.name}" />
    <module.checkout.anonymous module.name="${tv.system.name}" />
    <module.checkout.anonymous module.name="${utilities.system.name}" />
    <module.checkout.anonymous module.name="${vim.system.name}" />
    <module.checkout.anonymous module.name="${xmldata.system.name}" />
  </target>

  <target name="commit" description="Commit all changes from all projects from Google Project Hosting. Requires project membership.">
    <fail message="Must supply -Dsvn.message={message}" unless="svn.message" />
    <svn.commit svn.module="${ant.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${dpd.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${eclipse.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${emacs.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${pv.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${sdb.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${sdv.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${sensorbase.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${sensorshell.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${simdata.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${stackyhack.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${systemstatus.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${telemetry.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${tv.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${utilities.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${vim.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <svn.commit svn.module="${xmldata.system.name}" svn.message="${svn.message}" svn.username="${svn.username}" svn.password="${svn.password}" />
  </target>


  <target name="checkout" description="Check out/update of all projects from Google Project Hosting. Requires project membership.">
    <fail message="Must define svn.properties file with username and password." unless="svn.username" />
    <module.checkout module.name="${ant.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${dpd.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${eclipse.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${emacs.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${pv.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${sdb.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${sdv.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${sensorbase.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${sensorshell.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${simdata.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${stackyhack.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${systemstatus.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${telemetry.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${tv.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${utilities.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${vim.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <module.checkout module.name="${xmldata.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
  </target>

  <target name="build.sensorbase">
    <buildModule module.name="${sensorbase.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copyServiceDist module.name="${sensorbase.system.name}" />
    <copyServiceBin module.name="${sensorbase.system.name}" bin.name="sensorbase.jar" />
    <copyServiceBin module.name="${sensorbase.system.name}" bin.name="sensorbase.lib.jar" />
    <copyServiceBin module.name="${sensorbase.system.name}" bin.name="sensorbaseclient.jar" />
    <copyServiceBinDir module.name="${sensorbase.system.name}" dir.name="xml" />
    <copyServiceBin module.name="${sensorbase.system.name}" bin.name="sample.sensorbase.properties" />
  </target>

  <target name="build.utilities">
    <buildModule module.name="${utilities.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copyServiceDist module.name="${utilities.system.name}" />
    <copyServiceBin module.name="${utilities.system.name}" bin.name="stacktrace.lib.jar" />
    <copyServiceBin module.name="${utilities.system.name}" bin.name="tstamp.lib.jar" />
    <copyServiceBin module.name="${utilities.system.name}" bin.name="uricache.lib.jar" />
    <copyServiceBin module.name="${utilities.system.name}" bin.name="hackystatlogger.lib.jar" />
    <copyServiceBin module.name="${utilities.system.name}" bin.name="time.lib.jar" />
    <copyServiceBin module.name="${utilities.system.name}" bin.name="hackystatuserhome.lib.jar" />
  </target>

  <target name="build.sensorshell">
    <buildModule module.name="${sensorshell.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copySensorDist module.name="${sensorshell.system.name}" />
    <copySensorBin module.name="${sensorshell.system.name}" bin.name="sensorshell.jar" />
    <copySensorBin module.name="${sensorshell.system.name}" bin.name="shellperfeval.jar" />
    <copySensorBin module.name="${sensorshell.system.name}" bin.name="sample.sensorshell.properties" />
  </target>

  <target name="build.ant">
    <buildModule module.name="${ant.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copySensorDist module.name="${ant.system.name}" />
    <copySensorBin module.name="${ant.system.name}" bin.name="antsensors.jar" />
  </target>

  <target name="build.xmldata">
    <buildModule module.name="${xmldata.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copySensorDist module.name="${xmldata.system.name}" />
    <copySensorBin module.name="${xmldata.system.name}" bin.name="xmldata-cli.jar" />
  </target>

  <target name="build.emacs">
    <buildModule module.name="${emacs.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copySensorDist module.name="${emacs.system.name}" />
    <copySensorBin module.name="${emacs.system.name}" bin.name="build/sensor-package.el" />
  </target>

  <target name="build.vim">
    <buildModule module.name="${vim.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copySensorDist module.name="${vim.system.name}" />
    <copySensorBin module.name="${vim.system.name}" bin.name="HSVimSensor.class" />
    <copySensorBin module.name="${vim.system.name}" bin.name="VIMsensor.vim" />
  </target>

  <target name="build.eclipse">
    <buildModule module.name="${eclipse.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copySensorDist module.name="${eclipse.system.name}" />
    <copySensorBin module.name="${eclipse.system.name}" bin.name="org.hackystat.sensor.eclipse_${eclipse.version}.jar" />
  </target>

  <target name="build.sensordataviewer">
    <buildModule module.name="${sdv.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copyServiceDist module.name="${sdv.system.name}" />
    <copyServiceBin module.name="${sdv.system.name}" bin.name="sensordataviewer.war" />
  </target>

  <target name="build.sensordatabrowser">
    <buildModule module.name="${sdb.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copyServiceDist module.name="${sdb.system.name}" />
    <copyServiceBin module.name="${sdb.system.name}" bin.name="sensordatabrowser.war" />
  </target>

  <target name="build.projectviewer">
    <buildModule module.name="${pv.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copyServiceDist module.name="${pv.system.name}" />
    <copyServiceBin module.name="${pv.system.name}" bin.name="projectviewer.war" />
  </target>

  <target name="build.telemetryviewer">
    <buildModule module.name="${tv.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copyServiceDist module.name="${tv.system.name}" />
    <copyServiceBin module.name="${tv.system.name}" bin.name="telemetryviewer.war" />
  </target>

  <target name="build.dailyprojectdata">
    <buildModule module.name="${dpd.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copyServiceDist module.name="${dpd.system.name}" />
    <copyServiceBin module.name="${dpd.system.name}" bin.name="dailyprojectdata.jar" />
    <copyServiceBin module.name="${dpd.system.name}" bin.name="dailyprojectdata.lib.jar" />
    <copyServiceBin module.name="${dpd.system.name}" bin.name="sample.dailyprojectdata.properties" />
  </target>

  <target name="build.telemetry">
    <buildModule module.name="${telemetry.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copyServiceDist module.name="${telemetry.system.name}" />
    <copyServiceBin module.name="${telemetry.system.name}" bin.name="telemetry.jar" />
    <copyServiceBin module.name="${telemetry.system.name}" bin.name="telemetry.lib.jar" />
    <copyServiceBin module.name="${telemetry.system.name}" bin.name="sample.telemetry.properties" />
    <copyServiceBinDir module.name="${telemetry.system.name}" dir.name="definitions" />
    <copyServiceBinDir module.name="${telemetry.system.name}" dir.name="prefetch" />
  </target>

  <target name="build.stackyhack">
    <buildModule module.name="${stackyhack.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copySensorDist module.name="${stackyhack.system.name}" />
    <copySensorBin module.name="${stackyhack.system.name}" bin.name="build/dist/${stackyhack.system.name}-${version}.zip" />
  </target>

  <target name="build.systemstatus">
    <buildModule module.name="${systemstatus.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copyServiceDist module.name="${systemstatus.system.name}" />
    <copyServiceBin module.name="${systemstatus.system.name}" bin.name="pingmail.jar" />
  </target>

  <target name="build.simdata">
    <buildModule module.name="${simdata.system.name}" svn.username="${svn.username}" svn.password="${svn.password}" />
    <copyServiceDist module.name="${simdata.system.name}" />
    <copyServiceBin module.name="${simdata.system.name}" bin.name="simdata.jar" />
    <copyServiceBinDir module.name="${simdata.system.name}" dir.name="definitions" />
  </target>

  <target name="clean" description="Delete system directories.">
    <delete dir="${system.services.dir}" quiet="true" />
    <delete dir="${system.sensors.dir}" quiet="true" />
  </target>

  <target name="jar" description="Create jar files for services in correct order.">
    <jarModule module.name="hackystat-utilities" />
    <jarModule module.name="hackystat-sensorbase-uh" />
    <jarModule module.name="hackystat-analysis-dailyprojectdata" />
    <jarModule module.name="hackystat-analysis-telemetry" />
    <jarModule module.name="hackystat-sensorbase-simdata" />
  </target>
</project>





